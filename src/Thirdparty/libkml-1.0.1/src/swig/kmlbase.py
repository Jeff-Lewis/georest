# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _kmlbase
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _kmlbase.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _kmlbase.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_kmlbase.imaxdiv_t_quot_get, _kmlbase.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _kmlbase.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _kmlbase.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_kmlbase.imaxdiv_t_rem_get, _kmlbase.imaxdiv_t_rem_set)
    def __init__(self, *args): 
        this = _kmlbase.new_imaxdiv_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kmlbase.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _kmlbase.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)

imaxabs = _kmlbase.imaxabs
imaxdiv = _kmlbase.imaxdiv
strtoimax = _kmlbase.strtoimax
strtoumax = _kmlbase.strtoumax
wcstoimax = _kmlbase.wcstoimax
wcstoumax = _kmlbase.wcstoumax
class Attributes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attributes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Attributes, name)
    __repr__ = _swig_repr
    def FindValue(*args): return _kmlbase.Attributes_FindValue(*args)
    def FindKey(*args): return _kmlbase.Attributes_FindKey(*args)
    def GetSize(*args): return _kmlbase.Attributes_GetSize(*args)
    def SetString(*args): return _kmlbase.Attributes_SetString(*args)
    def __init__(self, *args): 
        this = _kmlbase.new_Attributes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kmlbase.delete_Attributes
    __del__ = lambda self : None;
Attributes_swigregister = _kmlbase.Attributes_swigregister
Attributes_swigregister(Attributes)

class Color32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kmlbase.new_Color32(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_red(*args): return _kmlbase.Color32_get_red(*args)
    def set_red(*args): return _kmlbase.Color32_set_red(*args)
    def get_green(*args): return _kmlbase.Color32_get_green(*args)
    def set_green(*args): return _kmlbase.Color32_set_green(*args)
    def get_blue(*args): return _kmlbase.Color32_get_blue(*args)
    def set_blue(*args): return _kmlbase.Color32_set_blue(*args)
    def get_alpha(*args): return _kmlbase.Color32_get_alpha(*args)
    def set_alpha(*args): return _kmlbase.Color32_set_alpha(*args)
    def get_color_abgr(*args): return _kmlbase.Color32_get_color_abgr(*args)
    def get_color_argb(*args): return _kmlbase.Color32_get_color_argb(*args)
    def to_string_abgr(*args): return _kmlbase.Color32_to_string_abgr(*args)
    def to_string_argb(*args): return _kmlbase.Color32_to_string_argb(*args)
    def set_color_abgr(*args): return _kmlbase.Color32_set_color_abgr(*args)
    def set_color_argb(*args): return _kmlbase.Color32_set_color_argb(*args)
    def __eq__(*args): return _kmlbase.Color32___eq__(*args)
    __swig_destroy__ = _kmlbase.delete_Color32
    __del__ = lambda self : None;
Color32_swigregister = _kmlbase.Color32_swigregister
Color32_swigregister(Color32)

class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["Create"] = lambda x: _kmlbase.DateTime_Create
    if _newclass:Create = staticmethod(_kmlbase.DateTime_Create)
    __swig_getmethods__["ToTimeT"] = lambda x: _kmlbase.DateTime_ToTimeT
    if _newclass:ToTimeT = staticmethod(_kmlbase.DateTime_ToTimeT)
    def GetTimeT(*args): return _kmlbase.DateTime_GetTimeT(*args)
    def GetXsdTime(*args): return _kmlbase.DateTime_GetXsdTime(*args)
    def GetXsdDate(*args): return _kmlbase.DateTime_GetXsdDate(*args)
    def GetXsdDateTime(*args): return _kmlbase.DateTime_GetXsdDateTime(*args)
    __swig_destroy__ = _kmlbase.delete_DateTime
    __del__ = lambda self : None;
DateTime_swigregister = _kmlbase.DateTime_swigregister
DateTime_swigregister(DateTime)
DateTime_Create = _kmlbase.DateTime_Create
DateTime_ToTimeT = _kmlbase.DateTime_ToTimeT

class Vec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kmlbase.new_Vec3(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_longitude(*args): return _kmlbase.Vec3_get_longitude(*args)
    def get_latitude(*args): return _kmlbase.Vec3_get_latitude(*args)
    def has_altitude(*args): return _kmlbase.Vec3_has_altitude(*args)
    def get_altitude(*args): return _kmlbase.Vec3_get_altitude(*args)
    __swig_destroy__ = _kmlbase.delete_Vec3
    __del__ = lambda self : None;
Vec3_swigregister = _kmlbase.Vec3_swigregister
Vec3_swigregister(Vec3)

class Version(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Version, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Version, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["GetString"] = lambda x: _kmlbase.Version_GetString
    if _newclass:GetString = staticmethod(_kmlbase.Version_GetString)
    __swig_destroy__ = _kmlbase.delete_Version
    __del__ = lambda self : None;
Version_swigregister = _kmlbase.Version_swigregister
Version_swigregister(Version)
Version_GetString = _kmlbase.Version_GetString

class XmlFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlFile, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def get_url(*args): return _kmlbase.XmlFile_get_url(*args)
    __swig_destroy__ = _kmlbase.delete_XmlFile
    __del__ = lambda self : None;
XmlFile_swigregister = _kmlbase.XmlFile_swigregister
XmlFile_swigregister(XmlFile)



